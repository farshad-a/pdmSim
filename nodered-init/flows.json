[
    {
        "id": "d907382e.777fa8",
        "type": "tab",
        "label": "AMP - Analytics",
        "disabled": false,
        "info": ""
    },
    {
        "id": "36ee829d.e2f00e",
        "type": "tab",
        "label": "AMP - Control",
        "disabled": false,
        "info": ""
    },
    {
        "id": "75af0f24.cd9bf",
        "type": "ui_group",
        "z": "",
        "name": "AMP FESTO LINE",
        "tab": "cf35b224.3676",
        "order": 1,
        "disp": true,
        "width": 24,
        "collapse": false
    },
    {
        "id": "cfafff28.7df5e",
        "type": "MySQLdatabase",
        "z": "",
        "name": "",
        "host": "sim-mysql",
        "port": "3306",
        "db": "festo",
        "tz": "",
        "charset": ""
    },
    {
        "id": "cf35b224.3676",
        "type": "ui_tab",
        "z": "",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "37a4fbef.2d7194",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "99b16eed.4c363",
        "type": "mqtt-broker",
        "z": "",
        "name": "",
        "broker": "sim-broker",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "33",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "100a9c4.256fd64",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "75af0f24.cd9bf",
        "order": 6,
        "width": 12,
        "height": 1
    },
    {
        "id": "629dfcd3.eaa634",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "75af0f24.cd9bf",
        "order": 9,
        "width": 3,
        "height": 1
    },
    {
        "id": "2d6e309e.b93a8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "75af0f24.cd9bf",
        "order": 11,
        "width": 3,
        "height": 1
    },
    {
        "id": "397f74ed.dfbf2c",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "75af0f24.cd9bf",
        "order": 12,
        "width": 3,
        "height": 1
    },
    {
        "id": "246f7661.d800aa",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "75af0f24.cd9bf",
        "order": 13,
        "width": 3,
        "height": 1
    },
    {
        "id": "b04d9fa4.f56fa",
        "type": "function",
        "z": "d907382e.777fa8",
        "name": "QUALITY SORTING STATION",
        "func": "//initialise the counter to 0 if it doesn't exist already\nvar good_quality_flow_out = context.get('good_quality_flow_out')||0;\nvar bad_quality_flow_out = context.get('bad_quality_flow_out')||0;\n\ngood_quality_flow_out = Math.floor(Math.random() * (40 - 25)) + 25;\nbad_quality_flow_out = Math.floor(Math.random() * (20 - 5)) + 5;\n\n// store the value back\ncontext.set('good_quality_flow_out',good_quality_flow_out);\ncontext.set('bad_quality_flow_out',bad_quality_flow_out);\n\nconst timestamp = new Date();\nmsg.topic = 'quality sorting';\nmsg.payload = [good_quality_flow_out, bad_quality_flow_out, timestamp.toISOString()];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "626f1d25.01be04",
                "839b3b50.2a7618",
                "d8fba48d.e0f208",
                "f37364b9.6bf048"
            ]
        ],
        "icon": "font-awesome/fa-industry"
    },
    {
        "id": "41e6d477.20b6bc",
        "type": "inject",
        "z": "d907382e.777fa8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 70,
        "y": 40,
        "wires": [
            [
                "b04d9fa4.f56fa"
            ]
        ]
    },
    {
        "id": "cdd3d0a8.04bb6",
        "type": "function",
        "z": "d907382e.777fa8",
        "name": "STORAGE STATION",
        "func": "let received_good_quality = msg.payload;\n\nvar storage = context.get('storage')||0;\n//required to calculate shared_sink\nvar total_dispatched = context.get('total_dispatched')||0;\n//initialising the shared sink with the first total_good_quality received\nvar shared_sink = context.get('shared_sink')||0; \n\nshared_sink += received_good_quality;\n\n//vacuum pressure\nlet flow_in = global.get('vacuum') * (Math.floor(Math.random() * (25 - 10)) + 10); \n//prevent negative data for whole numbers range in shared sink\n\nif (flow_in > shared_sink) {\n    flow_in = shared_sink;\n}\n\nstorage += flow_in;\n//vibration frequency\nlet flow_out = global.get('vibration') * (Math.floor(Math.random() * (10 - 5)) + 5) ;\n\n//prevent negative data for whole numbers range in storage\nif (flow_out > storage) {\n    total_dispatched += storage;\n    flow_out = storage;\n    storage -= storage; //seting storage to zero\n}\nelse {\n    total_dispatched += flow_out;\n    storage -= flow_out;\n}\n\ncontext.set('total_dispatched',total_dispatched);\ncontext.set('storage', storage);\n\nshared_sink -= flow_in;\ncontext.set('shared_sink',shared_sink);\n\nconst timestamp = new Date();\nmsg.topic = 'storage';\nmsg.payload = [shared_sink, storage, flow_in, flow_out, timestamp.toISOString()];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 180,
        "y": 420,
        "wires": [
            [
                "71da7193.679ec",
                "1cc47e26.4aaec2",
                "c908c7cd.a078d8",
                "ca57d019.0c693",
                "d8fba48d.e0f208",
                "f37364b9.6bf048"
            ]
        ],
        "icon": "font-awesome/fa-industry"
    },
    {
        "id": "626f1d25.01be04",
        "type": "function",
        "z": "d907382e.777fa8",
        "name": "Good Corn Flow Out",
        "func": "msg.topic = 'good corn flow out';\nmsg.payload = msg.payload[0]; //total good quality corn\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 100,
        "wires": [
            [
                "8bd45902.87a038",
                "cdd3d0a8.04bb6"
            ]
        ]
    },
    {
        "id": "839b3b50.2a7618",
        "type": "function",
        "z": "d907382e.777fa8",
        "name": "Bad Corn Flow Out",
        "func": "msg.topic = 'bad corn flow out'\nmsg.payload = msg.payload[1]; //bad corn\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 450,
        "y": 60,
        "wires": [
            [
                "8bd45902.87a038"
            ]
        ]
    },
    {
        "id": "8bd45902.87a038",
        "type": "ui_chart",
        "z": "d907382e.777fa8",
        "name": "",
        "group": "75af0f24.cd9bf",
        "order": 1,
        "width": 12,
        "height": 5,
        "label": "Quality Sorting Station",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "waiting for data...",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 1,
        "x": 1120,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "fa6e32bb.fc356",
        "type": "inject",
        "z": "d907382e.777fa8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 910,
        "y": 800,
        "wires": [
            [
                "8bd45902.87a038",
                "a3fea5b5.4ce498",
                "3a58defc.95efd2",
                "7af9c9b4.15c7e8",
                "3b8d5a2b.19f276"
            ]
        ]
    },
    {
        "id": "71da7193.679ec",
        "type": "function",
        "z": "d907382e.777fa8",
        "name": "Storage",
        "func": "msg.payload = msg.payload[1];\nmsg.topic = 'buffering storage';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 740,
        "y": 400,
        "wires": [
            [
                "3b8d5a2b.19f276"
            ]
        ]
    },
    {
        "id": "1cc47e26.4aaec2",
        "type": "function",
        "z": "d907382e.777fa8",
        "name": "Shared Sink",
        "func": "msg.payload = msg.payload[0];\nmsg.topic = 'shared sink'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 750,
        "y": 360,
        "wires": [
            [
                "3b8d5a2b.19f276"
            ]
        ]
    },
    {
        "id": "c908c7cd.a078d8",
        "type": "function",
        "z": "d907382e.777fa8",
        "name": "Flow In",
        "func": "msg.payload = msg.payload[2];\nmsg.topic = 'vacuum pressure flow in'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 740,
        "y": 440,
        "wires": [
            [
                "7af9c9b4.15c7e8"
            ]
        ]
    },
    {
        "id": "bae2c841.61a408",
        "type": "function",
        "z": "d907382e.777fa8",
        "name": "DOSING STATION",
        "func": "let flow_in = msg.payload;\nvar storage = context.get('storage')||0;\nvar total_production = context.get('total_production')||0;\n\nstorage += flow_in;\n//screw conveyor speed \nlet flow_out = global.get('screw') * (Math.floor(Math.random() * (5 - 1)) + 1);\n\nif (flow_out > storage)\n{\n    total_production += storage;\n    flow_out = storage;\n    storage -= storage; //setting storage to zero\n}\nelse\n{\n    total_production += flow_out;\n    storage -= flow_out;\n}\n\ncontext.set('total_production',total_production);\ncontext.set('storage', storage);\n\nconst timestamp = new Date();\nmsg.topic = 'dosing';\nmsg.payload = [storage, flow_in, flow_out, total_production, timestamp.toISOString()];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 190,
        "y": 660,
        "wires": [
            [
                "24355cca.2c28d4",
                "9b7d12ba.cd37d",
                "d8fba48d.e0f208",
                "da5bbf6e.61b0a",
                "e08e954d.56a588",
                "f37364b9.6bf048"
            ]
        ],
        "icon": "font-awesome/fa-industry"
    },
    {
        "id": "a3fea5b5.4ce498",
        "type": "ui_chart",
        "z": "d907382e.777fa8",
        "name": "Dosing Station",
        "group": "75af0f24.cd9bf",
        "order": 2,
        "width": 12,
        "height": 5,
        "label": "Dosing Station",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "waiting for data...",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 1,
        "x": 1100,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "9b7d12ba.cd37d",
        "type": "function",
        "z": "d907382e.777fa8",
        "name": "Flow In",
        "func": "msg.payload = msg.payload[1];\nmsg.topic = 'vacuum-vibration flow in'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 620,
        "wires": [
            [
                "3a58defc.95efd2"
            ]
        ]
    },
    {
        "id": "24355cca.2c28d4",
        "type": "function",
        "z": "d907382e.777fa8",
        "name": "Storage",
        "func": "msg.payload = msg.payload[0];\nmsg.topic = 'dosing storage';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 580,
        "wires": [
            [
                "3b8d5a2b.19f276"
            ]
        ]
    },
    {
        "id": "ca57d019.0c693",
        "type": "function",
        "z": "d907382e.777fa8",
        "name": "Flow Out",
        "func": "msg.payload = msg.payload[3];\nmsg.topic = 'vibration frequency flow out'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 740,
        "y": 480,
        "wires": [
            [
                "bae2c841.61a408",
                "7af9c9b4.15c7e8"
            ]
        ]
    },
    {
        "id": "d8fba48d.e0f208",
        "type": "function",
        "z": "d907382e.777fa8",
        "name": "Bosch IoT Gateway - MySQL Bundle",
        "func": "if (msg.topic === 'quality sorting')\n{\n    const arrivedPayload = msg.payload;\n    msg.payload = {};\n    \n    msg.payload.good_quality_flow_out = arrivedPayload[0];\n    msg.payload.bad_quality_flow_out = arrivedPayload[1];\n    msg.payload.timestamp = arrivedPayload[2];\n    \n    msg.topic = \"INSERT INTO qualitySorting (`good_quality_flow_out`, `bad_quality_flow_out`, `timestamp`) VALUES (:good_quality_flow_out, :bad_quality_flow_out, :timestamp);\"\n}\n\nelse if (msg.topic === 'storage')\n{\n    const arrivedPayload = msg.payload;\n    msg.payload = {};\n    \n    msg.payload.shared_sink = arrivedPayload[0];\n    msg.payload.storage = arrivedPayload[1];\n    msg.payload.flow_in = arrivedPayload[2];\n    msg.payload.flow_out = arrivedPayload[3];\n    msg.payload.timestamp = arrivedPayload[4];\n    \n    msg.topic = \"INSERT INTO storage (`shared_sink`, `storage`,`flow_in`, `flow_out`, `timestamp`) VALUES (:shared_sink, :storage, :flow_in, :flow_out, :timestamp);\"\n}\n\nelse if (msg.topic === 'dosing')\n{\n    const arrivedPayload = msg.payload;\n    msg.payload = {};\n    \n    msg.payload.storage = arrivedPayload[0];\n    msg.payload.flow_in = arrivedPayload[1];\n    msg.payload.flow_out = arrivedPayload[2];\n    msg.payload.total_production = arrivedPayload[3];\n    msg.payload.timestamp = arrivedPayload[4];\n    \n    msg.topic = \"INSERT INTO dosing (`storage`, `flow_in`, `flow_out`, `total_production`, `timestamp`) VALUES (:storage, :flow_in, :flow_out, :total_production, :timestamp);\"   \n}\n\nelse\n{\n    node.error('incorrect data arrived');\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 510,
        "y": 260,
        "wires": [
            [
                "60623fc5.12a7a"
            ]
        ],
        "icon": "font-awesome/fa-cube"
    },
    {
        "id": "60623fc5.12a7a",
        "type": "mysql",
        "z": "d907382e.777fa8",
        "mydb": "cfafff28.7df5e",
        "name": "FESTO DB",
        "x": 790,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "f818017d.6eedb",
        "type": "inject",
        "z": "d907382e.777fa8",
        "name": "Clear Signal",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 140,
        "wires": [
            [
                "651df3d6.5f2e7c"
            ]
        ]
    },
    {
        "id": "651df3d6.5f2e7c",
        "type": "function",
        "z": "d907382e.777fa8",
        "name": "Clear Tables",
        "func": "msg.payload = {};\n\nmsg.topic = \"TRUNCATE TABLE dosing;\"\nnode.send(msg);\n\nmsg.topic = \"TRUNCATE TABLE qualitySorting;\"\nnode.send(msg);\n\nmsg.topic = \"TRUNCATE TABLE storage;\"\nnode.send(msg);\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "x": 790,
        "y": 180,
        "wires": [
            [
                "60623fc5.12a7a"
            ]
        ]
    },
    {
        "id": "e08e954d.56a588",
        "type": "function",
        "z": "d907382e.777fa8",
        "name": "Flow Out",
        "func": "msg.payload = msg.payload[2];\nmsg.topic = 'screw conveyor flow out';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 660,
        "wires": [
            [
                "3a58defc.95efd2"
            ]
        ]
    },
    {
        "id": "da5bbf6e.61b0a",
        "type": "function",
        "z": "d907382e.777fa8",
        "name": "Total Production",
        "func": "msg.payload = msg.payload[3];\nmsg.topic = 'total production';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 743.5625,
        "y": 701.1111450195312,
        "wires": [
            [
                "a3fea5b5.4ce498"
            ]
        ]
    },
    {
        "id": "3a58defc.95efd2",
        "type": "ui_chart",
        "z": "d907382e.777fa8",
        "name": "Dosing Station",
        "group": "75af0f24.cd9bf",
        "order": 3,
        "width": 12,
        "height": 5,
        "label": "Dosing Station",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "waiting for data...",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 1,
        "x": 1100,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "3b8d5a2b.19f276",
        "type": "ui_chart",
        "z": "d907382e.777fa8",
        "name": "Intermediary Storage Units",
        "group": "75af0f24.cd9bf",
        "order": 4,
        "width": 12,
        "height": 5,
        "label": "Intermediary Storage Units",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "waiting for data...",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 1,
        "x": 1140,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "7af9c9b4.15c7e8",
        "type": "ui_chart",
        "z": "d907382e.777fa8",
        "name": "Storage Station",
        "group": "75af0f24.cd9bf",
        "order": 5,
        "width": 12,
        "height": 5,
        "label": "Storage Station",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "waiting for data...",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 1,
        "x": 1100,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "ebf8d931.11f068",
        "type": "mqtt out",
        "z": "d907382e.777fa8",
        "name": "Digital Twin Publisher",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "99b16eed.4c363",
        "x": 820,
        "y": 300,
        "wires": []
    },
    {
        "id": "392f64ff.26322c",
        "type": "function",
        "z": "36ee829d.e2f00e",
        "name": "Global Context - Actuators",
        "func": "if (msg.topic === 'vacuum')\n{\n    global.set('vacuum', msg.payload);\n}\n\nif (msg.topic === 'vibration')\n{\n    global.set('vibration', msg.payload);\n}\n\nif (msg.topic === 'screw')\n{\n    global.set('screw', msg.payload);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nvar vacuum = global.get('vacuum')||1;\nvar vibration = global.get('vibration')||1;\nvar screw = global.get('screw')||1;\n\nvacuum = global.set('vacuum', vacuum);\nvibration = global.set('vibration', vibration);\nscrew = global.set('screw', screw);",
        "finalize": "",
        "x": 550,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "56f114c6.18bf6c",
        "type": "inject",
        "z": "36ee829d.e2f00e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 80,
        "wires": [
            [
                "392f64ff.26322c"
            ]
        ]
    },
    {
        "id": "f37364b9.6bf048",
        "type": "function",
        "z": "d907382e.777fa8",
        "name": "Bosch IoT Gateway - MQTT Bundle",
        "func": "if (msg.topic === 'quality sorting')\n{\n    const arrivedPayload = msg.payload;\n    msg.payload = {};\n    \n    msg.payload = {\n        \"value\":{\n            good_quality_flow_out: arrivedPayload[0],\n            bad_quality_flow_out: arrivedPayload[1]  \n        },\n        \"timestamp\": arrivedPayload[2]\n    }\n\n    msg.topic = '/festo/digitaltwin/qualitysorting';\n    msg.qos = 1;\n    msg.retain = true;\n}\n\nelse if (msg.topic === 'storage')\n{\n    const arrivedPayload = msg.payload;\n    msg.payload = {};\n    \n    msg.payload = {\n        \"value\":{\n            \"shared_sink\": arrivedPayload[0],\n            \"storage\": arrivedPayload[1],\n            \"flow_in\": arrivedPayload[2],\n            \"flow_out\": arrivedPayload[3]\n        },\n        \"timestamp\": arrivedPayload[4]\n    }\n    \n    msg.topic = '/festo/digitaltwin/storage';\n    msg.qos = 1;\n    msg.retain = true;\n}\n\nelse if (msg.topic === 'dosing')\n{\n    const arrivedPayload = msg.payload;\n    msg.payload = {};\n    \n    msg.payload = {\n        \"value\":{\n            \"storage\": arrivedPayload[0],\n            \"flow_in\": arrivedPayload[1],\n            \"flow_out\": arrivedPayload[2],\n            \"total_production\": arrivedPayload[3]\n        },\n        \"timestamp\": arrivedPayload[4]\n    }\n    \n    msg.topic = '/festo/digitaltwin/dosing';\n    msg.qos = 1;\n    msg.retain = true;\n}\n\nelse\n{\n    node.error('incorrect data arrived');\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 500,
        "y": 300,
        "wires": [
            [
                "ebf8d931.11f068"
            ]
        ],
        "icon": "font-awesome/fa-cube"
    },
    {
        "id": "b4e5c809.02d728",
        "type": "ui_numeric",
        "z": "36ee829d.e2f00e",
        "name": "",
        "label": "Vacuum",
        "tooltip": "",
        "group": "75af0f24.cd9bf",
        "order": 8,
        "width": 6,
        "height": 2,
        "wrap": false,
        "passthru": true,
        "topic": "vacuum",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "step": 1,
        "x": 300,
        "y": 120,
        "wires": [
            [
                "392f64ff.26322c"
            ]
        ]
    },
    {
        "id": "194d9722.0c74e9",
        "type": "ui_numeric",
        "z": "36ee829d.e2f00e",
        "name": "",
        "label": "Vibration",
        "tooltip": "",
        "group": "75af0f24.cd9bf",
        "order": 7,
        "width": 6,
        "height": 2,
        "wrap": false,
        "passthru": true,
        "topic": "vibration",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "step": 1,
        "x": 300,
        "y": 160,
        "wires": [
            [
                "392f64ff.26322c"
            ]
        ]
    },
    {
        "id": "d6f6efad.4e0d4",
        "type": "ui_numeric",
        "z": "36ee829d.e2f00e",
        "name": "",
        "label": "Screw",
        "tooltip": "",
        "group": "75af0f24.cd9bf",
        "order": 10,
        "width": 6,
        "height": 2,
        "wrap": false,
        "passthru": true,
        "topic": "screw",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "step": 1,
        "x": 310,
        "y": 200,
        "wires": [
            [
                "392f64ff.26322c"
            ]
        ]
    },
    {
        "id": "6cd5d2e.ad0f02c",
        "type": "mqtt out",
        "z": "36ee829d.e2f00e",
        "name": "New Actuation",
        "topic": "/festo/actuation/new",
        "qos": "2",
        "retain": "false",
        "broker": "99b16eed.4c363",
        "x": 680,
        "y": 300,
        "wires": []
    },
    {
        "id": "8cfca1a5.b923c",
        "type": "mqtt in",
        "z": "36ee829d.e2f00e",
        "name": "Actuate",
        "topic": "/festo/actuation",
        "qos": "2",
        "datatype": "auto",
        "broker": "99b16eed.4c363",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "9b275e2a.946b7"
            ]
        ]
    },
    {
        "id": "9b275e2a.946b7",
        "type": "function",
        "z": "36ee829d.e2f00e",
        "name": "Global Context - Actuators",
        "func": "actuator = JSON.parse(msg.payload)\n\nglobal.set('vacuum', actuator['vacuum']);\nglobal.set('vibration', actuator['vibration']);\nglobal.set('screw', actuator['screw']);\n\nmsg.payload = true\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nvar vacuum = global.get('vacuum')||1;\nvar vibration = global.get('vibration')||1;\nvar screw = global.get('screw')||1;\n\nvacuum = global.set('vacuum', vacuum);\nvibration = global.set('vibration', vibration);\nscrew = global.set('screw', screw);",
        "finalize": "",
        "x": 410,
        "y": 300,
        "wires": [
            [
                "6cd5d2e.ad0f02c"
            ]
        ]
    }
]